查看Docker客户端的所有命令选项。
$ docker


docker command --help 深入了解指定Docker命令使用方法。
$ docker stats --help



# 容器使用
获取镜像
$ docker pull ubuntu

启动容器
$ docker run -it ubuntu /bin/bash
# exit


查看所有容器
$ docker ps -a

启动已停止运行的容器
$ docker start b750bbbcfd88 


后台运行
$ docker run -itd --name ubuntu-test ubuntu /bin/bash
-d 参数默认不会进入容器

停止容器
$ docker stop <容器 ID>


docker restart 重启停止的容器
$ docker restart <容器 ID>


进入容器
$ docker attach 1e560fca3906 
如果从这个容器退出，会导致容器的停止。

$ docker exec -it 243c32535da7 /bin/bash
如果从这个容器退出，容器不会停止


导出和导入容器
$ docker export 1e560fca3906 > ubuntu.tar

$ cat ubuntu.tar | docker import - test/ubuntu:v1
$ docker import http://example.com/exampleimage.tgz example/imagerepo

$ docker images

删除容器
$ docker rm -f 1e560fca3906


清理所有处于终止状态的容器。
$ docker container prune


web应用
$ docker pull training/webapp  # 载入镜像
$ docker run -d -P training/webapp python app.py
-d:让容器在后台运行。
-P:将容器内部使用的网络端口随机映射到我们使用的主机上。

$ docker ps
0.0.0.0:32768

$ docker run -d -p 5000:5000 training/webapp python app.py
-p 参数来设置不一样的端口

查看容器端口的映射情况。
$ docker port bf08b7f2cd89

查看容器内部的标准输出。
$ docker logs -f bf08b7f2cd89
-f: 让 docker logs 像使用 tail -f 一样来输出容器内部的标准输出。


查看容器内部运行的进程
$ docker top wizardly_chandrasekhar


查看 Docker 的底层信息
$ docker inspect wizardly_chandrasekhar
返回一个 JSON 文件记录着 Docker 容器的配置和状态信息。

停止WEB应用容器
$ docker stop 6457

重启WEB应用容器
$ docker start 6457



查询最后一次创建的容器
#  docker ps -l 

删除不需要的容器
$ docker stop 6457
$ docker rm 6457  





